#!/bin/bash

cleanup() {
    echo "Post-Commit Hook: cleanup()"
    [ -f "${preCommitFileChanged}" ] && rm -f "${preCommitFileChanged}"
   
    echo "Post-Commit Hook [DONE]"
    exit 0
}
trap cleanup EXIT

error() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"
    if [[ -n "$message" ]] ; then
    echo "Post-Commit Hook: Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
    else
    echo "Post-Commit Hook: Error on or near line ${parent_lineno}; exiting with status ${code}"
    fi
    exit "${code}"
}
trap 'error ${LINENO}' ERR

root="$(git rev-parse --show-toplevel)"
[ -d "$root" ] || exit 1
preCommitFileChanged="${root}/.pre-commit-changed"

# check if file is here
[ -f "${preCommitFileChanged}" ] || exit 0

echo "Post-Commit Hook [START]: add automatically changed files ..."

function addFile()
{
    file="$1"
    echo "stage file: ${file}"
    git add ${file}
}
export -f addFile

cat "${preCommitFileChanged}" | xargs -n 1 -I {} bash -c 'addFile "${@}"' _ {}
rm -f "${preCommitFileChanged}"

# Show the status
git status

# Allows us to read user input below, assigns stdin to keyboard
# exec < /dev/tty
# read -p "Post-Commit Hook: Do you want to auto amend-commit the changed files? (Y/n) (default: Y) " yn
if [ "$yn" = "" ]; then
    yn='Y'
fi
case $yn in
    [Y] ) git commit --amend -C HEAD --no-verify
esac

exit 0