#!/bin/bash

if [ "$1" == "--formatAll" ]; then
  formatAll="true"
  title="Format all:"
else
  title="Pre-Commit Hook: autoformat:"
fi

echo "$title [START]"

function exitTrap() {
  ret=$?
  trap '' SIGINT SIGHUP SIGTERM SIGQUIT # ignore signals
  if [ $ret -gt 0 ]; then
    echo "$title [failed]"
    [ -f "${preCommitFileChanged}" ] && rm "${preCommitFileChanged}"
  fi
}
trap exitTrap EXIT

owndir="$(
  cd "$(dirname "$0")"
  pwd -P
)"

root="$(git rev-parse --show-toplevel)"
[ -d "$root" ] || exit 1
preCommitFileChanged="${root}/.pre-commit-changed"

# check if .pre-commmit-changed file is here
[ -f "${preCommitFileChanged}" ] && rm "${preCommitFileChanged}"

# OS name
OS_NAME=$(uname)

# Get only changed files or all files
if [ -z "${formatAll}" ]; then
  echo "$title get files with diffs ..."
  allFiles=$(git diff --name-only --cached | tr '\n' '\0' | base64)
else
  echo "$title get all files ..."
  allFiles=$(git ls-tree -r HEAD --name-only --full-name ${root} | tr '\n' '\0' | base64)
fi

function findExecutables() {
  find "$owndir/autoformat" -type f -perm +0111 >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    find "$owndir/autoformat" -type f -perm +0111
  else
    find "$owndir/autoformat" -type f -executable
  fi
}

function getArgsBase64Decode() {
  if echo "test" | base64 -d &>/dev/null; then
    echo "-d"
  else
    echo "-D"
  fi
}

decodeArgs=$(getArgsBase64Decode)

# get all disabled formaters
disabledFormatters=$(git config precommit-format.disabledFormattersRegex)
enabledFormatters=$(git config precommit-format.enabledFormattersRegex)

findExecutables | {
  while read formatter; do
    # check the formatter is disabled
    if [ -n "${enabledFormatters}" ]; then
      echo "$formatter" | grep -Eqi "${enabledFormatters}" ||
        {
          echo "Skip formatter '${formatter}'' [disabled by git config]"
          continue
        }
    fi
    if [ -n "${disabledFormatters}" ]; then
      echo "$formatter" | grep -Eqi "${disabledFormatters}" &&
        {
          echo "Skip formatter '${formatter}'' [disabled by git config]"
          continue
        }
    fi

    echo "Formatting: '${formatter}':"

    # get pattern files
    magic="$formatter".magic
    patterns="$formatter".patterns
    [ -f "$patterns" -o -f "$magic" ] || continue

    # format all files
    echo -ne "$allFiles" | base64 ${decodeArgs} | {
      while
        IFS=
        read -r -d $'\0' orig
      do
        orig="${root}/${orig}"

        # file is getting deleted, ignore
        [ -f "$orig" ] || continue

        # file matches one of the patterns
        match_pattern=''
        [ -f "$patterns" ] && echo "$orig" | grep -Eqif "$patterns" && match_pattern='1'

        # fileâ€™s libmagic output matches
        match_magic=''
        [ $match_pattern ] || {
          [ -f "$magic" ] && file "$orig" | grep -Eqif "$magic" && match_magic='1'
        }

        # if none, ignore
        [ "$match_pattern" -o "$match_magic" ] || continue

        # format
        "$formatter" "$orig" || {
          echo "[1] exit"
          exit 1
        }

        # notify post-commit
        echo "$orig" >>"${preCommitFileChanged}"

        [ ! -z "${formatAll}" ] && git add "$orig" || true

      done
    } || {
      echo "[2] exit"
      exit 1
    }
  done
} || {
  echo "[3] exit"
  exit 1
}

echo "$title [DONE]"
