// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGICNODE_EXECUTIONGRAPH_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LOGICNODE_EXECUTIONGRAPH_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

#include "executionGraph/serialization/schemas/cpp/LogicSocket_generated.h"

namespace executionGraph {
namespace serialization {

struct LogicNode;

struct LogicNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_NAME = 8,
    VT_INPUTSOCKETS = 10,
    VT_OUTPUTSOCKETS = 12,
    VT_DATA = 14
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<LogicSocket>> *inputSockets() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<LogicSocket>> *>(VT_INPUTSOCKETS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<LogicSocket>> *outputSockets() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<LogicSocket>> *>(VT_OUTPUTSOCKETS);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flexbuffers::Reference data_flexbuffer_root() const {
    return flexbuffers::GetRoot(data()->Data(), data()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyOffsetRequired(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INPUTSOCKETS) &&
           verifier.VerifyVector(inputSockets()) &&
           verifier.VerifyVectorOfTables(inputSockets()) &&
           VerifyOffset(verifier, VT_OUTPUTSOCKETS) &&
           verifier.VerifyVector(outputSockets()) &&
           verifier.VerifyVectorOfTables(outputSockets()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct LogicNodeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(LogicNode::VT_ID, id, 0);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(LogicNode::VT_TYPE, type);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LogicNode::VT_NAME, name);
  }
  void add_inputSockets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<LogicSocket>>> inputSockets) {
    fbb_.AddOffset(LogicNode::VT_INPUTSOCKETS, inputSockets);
  }
  void add_outputSockets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<LogicSocket>>> outputSockets) {
    fbb_.AddOffset(LogicNode::VT_OUTPUTSOCKETS, outputSockets);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(LogicNode::VT_DATA, data);
  }
  explicit LogicNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogicNodeBuilder &operator=(const LogicNodeBuilder &);
  flatbuffers::Offset<LogicNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogicNode>(end);
    fbb_.Required(o, LogicNode::VT_TYPE);
    return o;
  }
};

inline flatbuffers::Offset<LogicNode> CreateLogicNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<LogicSocket>>> inputSockets = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<LogicSocket>>> outputSockets = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  LogicNodeBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_data(data);
  builder_.add_outputSockets(outputSockets);
  builder_.add_inputSockets(inputSockets);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<LogicNode> CreateLogicNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const char *type = nullptr,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<LogicSocket>> *inputSockets = nullptr,
    const std::vector<flatbuffers::Offset<LogicSocket>> *outputSockets = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  return executionGraph::serialization::CreateLogicNode(
      _fbb,
      id,
      type ? _fbb.CreateString(type) : 0,
      name ? _fbb.CreateString(name) : 0,
      inputSockets ? _fbb.CreateVector<flatbuffers::Offset<LogicSocket>>(*inputSockets) : 0,
      outputSockets ? _fbb.CreateVector<flatbuffers::Offset<LogicSocket>>(*outputSockets) : 0,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

}  // namespace serialization
}  // namespace executionGraph

#endif  // FLATBUFFERS_GENERATED_LOGICNODE_EXECUTIONGRAPH_SERIALIZATION_H_
