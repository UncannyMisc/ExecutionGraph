// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGICSOCKET_EXECUTIONGRAPH_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LOGICSOCKET_EXECUTIONGRAPH_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace executionGraph {
namespace serialization {

struct LogicSocket;

struct LogicSocket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPEINDEX = 4,
    VT_TYPE = 6,
    VT_TYPENAME = 8,
    VT_INDEX = 10
  };
  uint64_t typeIndex() const {
    return GetField<uint64_t>(VT_TYPEINDEX, 0);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::String *typeName() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPENAME);
  }
  uint64_t index() const {
    return GetField<uint64_t>(VT_INDEX, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TYPEINDEX) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_TYPENAME) &&
           verifier.VerifyString(typeName()) &&
           VerifyField<uint64_t>(verifier, VT_INDEX) &&
           verifier.EndTable();
  }
};

struct LogicSocketBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_typeIndex(uint64_t typeIndex) {
    fbb_.AddElement<uint64_t>(LogicSocket::VT_TYPEINDEX, typeIndex, 0);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(LogicSocket::VT_TYPE, type);
  }
  void add_typeName(flatbuffers::Offset<flatbuffers::String> typeName) {
    fbb_.AddOffset(LogicSocket::VT_TYPENAME, typeName);
  }
  void add_index(uint64_t index) {
    fbb_.AddElement<uint64_t>(LogicSocket::VT_INDEX, index, 0);
  }
  explicit LogicSocketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogicSocketBuilder &operator=(const LogicSocketBuilder &);
  flatbuffers::Offset<LogicSocket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogicSocket>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogicSocket> CreateLogicSocket(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t typeIndex = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::String> typeName = 0,
    uint64_t index = 0) {
  LogicSocketBuilder builder_(_fbb);
  builder_.add_index(index);
  builder_.add_typeIndex(typeIndex);
  builder_.add_typeName(typeName);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<LogicSocket> CreateLogicSocketDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t typeIndex = 0,
    const char *type = nullptr,
    const char *typeName = nullptr,
    uint64_t index = 0) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto typeName__ = typeName ? _fbb.CreateString(typeName) : 0;
  return executionGraph::serialization::CreateLogicSocket(
      _fbb,
      typeIndex,
      type__,
      typeName__,
      index);
}

}  // namespace serialization
}  // namespace executionGraph

#endif  // FLATBUFFERS_GENERATED_LOGICSOCKET_EXECUTIONGRAPH_SERIALIZATION_H_
