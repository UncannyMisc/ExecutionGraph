// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRAPHTYPEDESCRIPTION_EXECUTIONGRAPH_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_GRAPHTYPEDESCRIPTION_EXECUTIONGRAPH_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "executionGraph/serialization/schemas/cpp/NodeTypeDescription_generated.h"
#include "executionGraph/serialization/schemas/cpp/SocketTypeDescription_generated.h"

namespace executionGraph {
namespace serialization {

struct GraphTypeDescription;

struct GraphTypeDescription FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_SOCKETTYPEDESCRIPTIONS = 8,
    VT_NODETYPEDESCRIPTIONS = 10,
    VT_DESCRIPTION = 12
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SocketTypeDescription>> *socketTypeDescriptions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SocketTypeDescription>> *>(VT_SOCKETTYPEDESCRIPTIONS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<NodeTypeDescription>> *nodeTypeDescriptions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NodeTypeDescription>> *>(VT_NODETYPEDESCRIPTIONS);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_SOCKETTYPEDESCRIPTIONS) &&
           verifier.VerifyVector(socketTypeDescriptions()) &&
           verifier.VerifyVectorOfTables(socketTypeDescriptions()) &&
           VerifyOffset(verifier, VT_NODETYPEDESCRIPTIONS) &&
           verifier.VerifyVector(nodeTypeDescriptions()) &&
           verifier.VerifyVectorOfTables(nodeTypeDescriptions()) &&
           VerifyOffsetRequired(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           verifier.EndTable();
  }
};

struct GraphTypeDescriptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(GraphTypeDescription::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(GraphTypeDescription::VT_NAME, name);
  }
  void add_socketTypeDescriptions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SocketTypeDescription>>> socketTypeDescriptions) {
    fbb_.AddOffset(GraphTypeDescription::VT_SOCKETTYPEDESCRIPTIONS, socketTypeDescriptions);
  }
  void add_nodeTypeDescriptions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeTypeDescription>>> nodeTypeDescriptions) {
    fbb_.AddOffset(GraphTypeDescription::VT_NODETYPEDESCRIPTIONS, nodeTypeDescriptions);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(GraphTypeDescription::VT_DESCRIPTION, description);
  }
  explicit GraphTypeDescriptionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GraphTypeDescriptionBuilder &operator=(const GraphTypeDescriptionBuilder &);
  flatbuffers::Offset<GraphTypeDescription> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GraphTypeDescription>(end);
    fbb_.Required(o, GraphTypeDescription::VT_ID);
    fbb_.Required(o, GraphTypeDescription::VT_NAME);
    fbb_.Required(o, GraphTypeDescription::VT_SOCKETTYPEDESCRIPTIONS);
    fbb_.Required(o, GraphTypeDescription::VT_DESCRIPTION);
    return o;
  }
};

inline flatbuffers::Offset<GraphTypeDescription> CreateGraphTypeDescription(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SocketTypeDescription>>> socketTypeDescriptions = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeTypeDescription>>> nodeTypeDescriptions = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0) {
  GraphTypeDescriptionBuilder builder_(_fbb);
  builder_.add_description(description);
  builder_.add_nodeTypeDescriptions(nodeTypeDescriptions);
  builder_.add_socketTypeDescriptions(socketTypeDescriptions);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<GraphTypeDescription> CreateGraphTypeDescriptionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<SocketTypeDescription>> *socketTypeDescriptions = nullptr,
    const std::vector<flatbuffers::Offset<NodeTypeDescription>> *nodeTypeDescriptions = nullptr,
    const char *description = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto socketTypeDescriptions__ = socketTypeDescriptions ? _fbb.CreateVector<flatbuffers::Offset<SocketTypeDescription>>(*socketTypeDescriptions) : 0;
  auto nodeTypeDescriptions__ = nodeTypeDescriptions ? _fbb.CreateVector<flatbuffers::Offset<NodeTypeDescription>>(*nodeTypeDescriptions) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  return executionGraph::serialization::CreateGraphTypeDescription(
      _fbb,
      id__,
      name__,
      socketTypeDescriptions__,
      nodeTypeDescriptions__,
      description__);
}

}  // namespace serialization
}  // namespace executionGraph

#endif  // FLATBUFFERS_GENERATED_GRAPHTYPEDESCRIPTION_EXECUTIONGRAPH_SERIALIZATION_H_
