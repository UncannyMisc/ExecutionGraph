// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRAPHMANAGEMENTMESSAGES_executionGraphGui_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_GRAPHMANAGEMENTMESSAGES_executionGraphGui_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

#include "executionGraphGui/messages/schemas/cpp/ConstructorKeyValue_generated.h"
#include "executionGraphGui/messages/schemas/cpp/CycleDescription_generated.h"
#include "executionGraphGui/messages/schemas/cpp/DataTypes_generated.h"
#include "executionGraph/serialization/schemas/cpp/LogicNode_generated.h"
#include "executionGraph/serialization/schemas/cpp/LogicSocket_generated.h"
#include "executionGraph/serialization/schemas/cpp/SocketLinkDescription_generated.h"

namespace executionGraphGui {
namespace serialization {

struct AddGraphRequest;

struct AddGraphResponse;

struct RemoveGraphRequest;

struct AddGraphRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPHTYPEID = 4
  };
  const flatbuffers::String *graphTypeId() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPHTYPEID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_GRAPHTYPEID) &&
           verifier.VerifyString(graphTypeId()) &&
           verifier.EndTable();
  }
};

struct AddGraphRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphTypeId(flatbuffers::Offset<flatbuffers::String> graphTypeId) {
    fbb_.AddOffset(AddGraphRequest::VT_GRAPHTYPEID, graphTypeId);
  }
  explicit AddGraphRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddGraphRequestBuilder &operator=(const AddGraphRequestBuilder &);
  flatbuffers::Offset<AddGraphRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddGraphRequest>(end);
    fbb_.Required(o, AddGraphRequest::VT_GRAPHTYPEID);
    return o;
  }
};

inline flatbuffers::Offset<AddGraphRequest> CreateAddGraphRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> graphTypeId = 0) {
  AddGraphRequestBuilder builder_(_fbb);
  builder_.add_graphTypeId(graphTypeId);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddGraphRequest> CreateAddGraphRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *graphTypeId = nullptr) {
  return executionGraphGui::serialization::CreateAddGraphRequest(
      _fbb,
      graphTypeId ? _fbb.CreateString(graphTypeId) : 0);
}

struct AddGraphResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPHID = 4
  };
  const flatbuffers::String *graphId() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPHID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_GRAPHID) &&
           verifier.VerifyString(graphId()) &&
           verifier.EndTable();
  }
};

struct AddGraphResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphId(flatbuffers::Offset<flatbuffers::String> graphId) {
    fbb_.AddOffset(AddGraphResponse::VT_GRAPHID, graphId);
  }
  explicit AddGraphResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddGraphResponseBuilder &operator=(const AddGraphResponseBuilder &);
  flatbuffers::Offset<AddGraphResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddGraphResponse>(end);
    fbb_.Required(o, AddGraphResponse::VT_GRAPHID);
    return o;
  }
};

inline flatbuffers::Offset<AddGraphResponse> CreateAddGraphResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> graphId = 0) {
  AddGraphResponseBuilder builder_(_fbb);
  builder_.add_graphId(graphId);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddGraphResponse> CreateAddGraphResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *graphId = nullptr) {
  return executionGraphGui::serialization::CreateAddGraphResponse(
      _fbb,
      graphId ? _fbb.CreateString(graphId) : 0);
}

struct RemoveGraphRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPHID = 4
  };
  const flatbuffers::String *graphId() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPHID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_GRAPHID) &&
           verifier.VerifyString(graphId()) &&
           verifier.EndTable();
  }
};

struct RemoveGraphRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphId(flatbuffers::Offset<flatbuffers::String> graphId) {
    fbb_.AddOffset(RemoveGraphRequest::VT_GRAPHID, graphId);
  }
  explicit RemoveGraphRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveGraphRequestBuilder &operator=(const RemoveGraphRequestBuilder &);
  flatbuffers::Offset<RemoveGraphRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveGraphRequest>(end);
    fbb_.Required(o, RemoveGraphRequest::VT_GRAPHID);
    return o;
  }
};

inline flatbuffers::Offset<RemoveGraphRequest> CreateRemoveGraphRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> graphId = 0) {
  RemoveGraphRequestBuilder builder_(_fbb);
  builder_.add_graphId(graphId);
  return builder_.Finish();
}

inline flatbuffers::Offset<RemoveGraphRequest> CreateRemoveGraphRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *graphId = nullptr) {
  return executionGraphGui::serialization::CreateRemoveGraphRequest(
      _fbb,
      graphId ? _fbb.CreateString(graphId) : 0);
}

}  // namespace serialization
}  // namespace executionGraphGui

#endif  // FLATBUFFERS_GENERATED_GRAPHMANAGEMENTMESSAGES_executionGraphGui_SERIALIZATION_H_
