// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRAPHMANAGEMENTMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_GRAPHMANAGEMENTMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

#include "executionGraphGui/messages/schemas/cpp/ConstructorKeyValue_generated.h"
#include "executionGraphGui/messages/schemas/cpp/CycleDescription_generated.h"
#include "executionGraphGui/messages/schemas/cpp/DataTypes_generated.h"
#include "executionGraph/serialization/schemas/cpp/ExecutionGraph_generated.h"
#include "executionGraph/serialization/schemas/cpp/GraphTypeDescription_generated.h"
#include "executionGraph/serialization/schemas/cpp/LogicNode_generated.h"
#include "executionGraph/serialization/schemas/cpp/LogicSocket_generated.h"
#include "executionGraph/serialization/schemas/cpp/NodeTypeDescription_generated.h"
#include "executionGraph/serialization/schemas/cpp/SocketLinkDescription_generated.h"
#include "executionGraph/serialization/schemas/cpp/SocketTypeDescription_generated.h"

namespace executionGraphGui {
namespace serialization {

struct AddGraphRequest;

struct AddGraphResponse;

struct RemoveGraphRequest;

struct LoadGraphRequest;

struct LoadGraphResponse;

struct SaveGraphRequest;

struct AddGraphRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPHTYPEID = 4
  };
  const flatbuffers::String *graphTypeId() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPHTYPEID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_GRAPHTYPEID) &&
           verifier.VerifyString(graphTypeId()) &&
           verifier.EndTable();
  }
};

struct AddGraphRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphTypeId(flatbuffers::Offset<flatbuffers::String> graphTypeId) {
    fbb_.AddOffset(AddGraphRequest::VT_GRAPHTYPEID, graphTypeId);
  }
  explicit AddGraphRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddGraphRequestBuilder &operator=(const AddGraphRequestBuilder &);
  flatbuffers::Offset<AddGraphRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddGraphRequest>(end);
    fbb_.Required(o, AddGraphRequest::VT_GRAPHTYPEID);
    return o;
  }
};

inline flatbuffers::Offset<AddGraphRequest> CreateAddGraphRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> graphTypeId = 0) {
  AddGraphRequestBuilder builder_(_fbb);
  builder_.add_graphTypeId(graphTypeId);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddGraphRequest> CreateAddGraphRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *graphTypeId = nullptr) {
  auto graphTypeId__ = graphTypeId ? _fbb.CreateString(graphTypeId) : 0;
  return executionGraphGui::serialization::CreateAddGraphRequest(
      _fbb,
      graphTypeId__);
}

struct AddGraphResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPHID = 4
  };
  const flatbuffers::String *graphId() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPHID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_GRAPHID) &&
           verifier.VerifyString(graphId()) &&
           verifier.EndTable();
  }
};

struct AddGraphResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphId(flatbuffers::Offset<flatbuffers::String> graphId) {
    fbb_.AddOffset(AddGraphResponse::VT_GRAPHID, graphId);
  }
  explicit AddGraphResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddGraphResponseBuilder &operator=(const AddGraphResponseBuilder &);
  flatbuffers::Offset<AddGraphResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddGraphResponse>(end);
    fbb_.Required(o, AddGraphResponse::VT_GRAPHID);
    return o;
  }
};

inline flatbuffers::Offset<AddGraphResponse> CreateAddGraphResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> graphId = 0) {
  AddGraphResponseBuilder builder_(_fbb);
  builder_.add_graphId(graphId);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddGraphResponse> CreateAddGraphResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *graphId = nullptr) {
  auto graphId__ = graphId ? _fbb.CreateString(graphId) : 0;
  return executionGraphGui::serialization::CreateAddGraphResponse(
      _fbb,
      graphId__);
}

struct RemoveGraphRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPHID = 4
  };
  const flatbuffers::String *graphId() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPHID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_GRAPHID) &&
           verifier.VerifyString(graphId()) &&
           verifier.EndTable();
  }
};

struct RemoveGraphRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphId(flatbuffers::Offset<flatbuffers::String> graphId) {
    fbb_.AddOffset(RemoveGraphRequest::VT_GRAPHID, graphId);
  }
  explicit RemoveGraphRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveGraphRequestBuilder &operator=(const RemoveGraphRequestBuilder &);
  flatbuffers::Offset<RemoveGraphRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveGraphRequest>(end);
    fbb_.Required(o, RemoveGraphRequest::VT_GRAPHID);
    return o;
  }
};

inline flatbuffers::Offset<RemoveGraphRequest> CreateRemoveGraphRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> graphId = 0) {
  RemoveGraphRequestBuilder builder_(_fbb);
  builder_.add_graphId(graphId);
  return builder_.Finish();
}

inline flatbuffers::Offset<RemoveGraphRequest> CreateRemoveGraphRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *graphId = nullptr) {
  auto graphId__ = graphId ? _fbb.CreateString(graphId) : 0;
  return executionGraphGui::serialization::CreateRemoveGraphRequest(
      _fbb,
      graphId__);
}

struct LoadGraphRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILEPATH = 4
  };
  const flatbuffers::String *filePath() const {
    return GetPointer<const flatbuffers::String *>(VT_FILEPATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_FILEPATH) &&
           verifier.VerifyString(filePath()) &&
           verifier.EndTable();
  }
};

struct LoadGraphRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_filePath(flatbuffers::Offset<flatbuffers::String> filePath) {
    fbb_.AddOffset(LoadGraphRequest::VT_FILEPATH, filePath);
  }
  explicit LoadGraphRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoadGraphRequestBuilder &operator=(const LoadGraphRequestBuilder &);
  flatbuffers::Offset<LoadGraphRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoadGraphRequest>(end);
    fbb_.Required(o, LoadGraphRequest::VT_FILEPATH);
    return o;
  }
};

inline flatbuffers::Offset<LoadGraphRequest> CreateLoadGraphRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> filePath = 0) {
  LoadGraphRequestBuilder builder_(_fbb);
  builder_.add_filePath(filePath);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoadGraphRequest> CreateLoadGraphRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *filePath = nullptr) {
  auto filePath__ = filePath ? _fbb.CreateString(filePath) : 0;
  return executionGraphGui::serialization::CreateLoadGraphRequest(
      _fbb,
      filePath__);
}

struct LoadGraphResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPHID = 4,
    VT_GRAPH = 6,
    VT_VISUALIZATION = 8
  };
  const flatbuffers::String *graphId() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPHID);
  }
  const executionGraph::serialization::ExecutionGraph *graph() const {
    return GetPointer<const executionGraph::serialization::ExecutionGraph *>(VT_GRAPH);
  }
  const flatbuffers::Vector<uint8_t> *visualization() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VISUALIZATION);
  }
  flexbuffers::Reference visualization_flexbuffer_root() const {
    return flexbuffers::GetRoot(visualization()->Data(), visualization()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_GRAPHID) &&
           verifier.VerifyString(graphId()) &&
           VerifyOffsetRequired(verifier, VT_GRAPH) &&
           verifier.VerifyTable(graph()) &&
           VerifyOffset(verifier, VT_VISUALIZATION) &&
           verifier.VerifyVector(visualization()) &&
           verifier.EndTable();
  }
};

struct LoadGraphResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphId(flatbuffers::Offset<flatbuffers::String> graphId) {
    fbb_.AddOffset(LoadGraphResponse::VT_GRAPHID, graphId);
  }
  void add_graph(flatbuffers::Offset<executionGraph::serialization::ExecutionGraph> graph) {
    fbb_.AddOffset(LoadGraphResponse::VT_GRAPH, graph);
  }
  void add_visualization(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> visualization) {
    fbb_.AddOffset(LoadGraphResponse::VT_VISUALIZATION, visualization);
  }
  explicit LoadGraphResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoadGraphResponseBuilder &operator=(const LoadGraphResponseBuilder &);
  flatbuffers::Offset<LoadGraphResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoadGraphResponse>(end);
    fbb_.Required(o, LoadGraphResponse::VT_GRAPHID);
    fbb_.Required(o, LoadGraphResponse::VT_GRAPH);
    return o;
  }
};

inline flatbuffers::Offset<LoadGraphResponse> CreateLoadGraphResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> graphId = 0,
    flatbuffers::Offset<executionGraph::serialization::ExecutionGraph> graph = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> visualization = 0) {
  LoadGraphResponseBuilder builder_(_fbb);
  builder_.add_visualization(visualization);
  builder_.add_graph(graph);
  builder_.add_graphId(graphId);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoadGraphResponse> CreateLoadGraphResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *graphId = nullptr,
    flatbuffers::Offset<executionGraph::serialization::ExecutionGraph> graph = 0,
    const std::vector<uint8_t> *visualization = nullptr) {
  auto graphId__ = graphId ? _fbb.CreateString(graphId) : 0;
  auto visualization__ = visualization ? _fbb.CreateVector<uint8_t>(*visualization) : 0;
  return executionGraphGui::serialization::CreateLoadGraphResponse(
      _fbb,
      graphId__,
      graph,
      visualization__);
}

struct SaveGraphRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPHID = 4,
    VT_FILEPATH = 6,
    VT_OVERWRITE = 8,
    VT_VISUALIZATION = 10
  };
  const flatbuffers::String *graphId() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPHID);
  }
  const flatbuffers::String *filePath() const {
    return GetPointer<const flatbuffers::String *>(VT_FILEPATH);
  }
  bool overwrite() const {
    return GetField<uint8_t>(VT_OVERWRITE, 0) != 0;
  }
  const flatbuffers::Vector<uint8_t> *visualization() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VISUALIZATION);
  }
  flexbuffers::Reference visualization_flexbuffer_root() const {
    return flexbuffers::GetRoot(visualization()->Data(), visualization()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_GRAPHID) &&
           verifier.VerifyString(graphId()) &&
           VerifyOffsetRequired(verifier, VT_FILEPATH) &&
           verifier.VerifyString(filePath()) &&
           VerifyField<uint8_t>(verifier, VT_OVERWRITE) &&
           VerifyOffset(verifier, VT_VISUALIZATION) &&
           verifier.VerifyVector(visualization()) &&
           verifier.EndTable();
  }
};

struct SaveGraphRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphId(flatbuffers::Offset<flatbuffers::String> graphId) {
    fbb_.AddOffset(SaveGraphRequest::VT_GRAPHID, graphId);
  }
  void add_filePath(flatbuffers::Offset<flatbuffers::String> filePath) {
    fbb_.AddOffset(SaveGraphRequest::VT_FILEPATH, filePath);
  }
  void add_overwrite(bool overwrite) {
    fbb_.AddElement<uint8_t>(SaveGraphRequest::VT_OVERWRITE, static_cast<uint8_t>(overwrite), 0);
  }
  void add_visualization(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> visualization) {
    fbb_.AddOffset(SaveGraphRequest::VT_VISUALIZATION, visualization);
  }
  explicit SaveGraphRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SaveGraphRequestBuilder &operator=(const SaveGraphRequestBuilder &);
  flatbuffers::Offset<SaveGraphRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SaveGraphRequest>(end);
    fbb_.Required(o, SaveGraphRequest::VT_GRAPHID);
    fbb_.Required(o, SaveGraphRequest::VT_FILEPATH);
    return o;
  }
};

inline flatbuffers::Offset<SaveGraphRequest> CreateSaveGraphRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> graphId = 0,
    flatbuffers::Offset<flatbuffers::String> filePath = 0,
    bool overwrite = false,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> visualization = 0) {
  SaveGraphRequestBuilder builder_(_fbb);
  builder_.add_visualization(visualization);
  builder_.add_filePath(filePath);
  builder_.add_graphId(graphId);
  builder_.add_overwrite(overwrite);
  return builder_.Finish();
}

inline flatbuffers::Offset<SaveGraphRequest> CreateSaveGraphRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *graphId = nullptr,
    const char *filePath = nullptr,
    bool overwrite = false,
    const std::vector<uint8_t> *visualization = nullptr) {
  auto graphId__ = graphId ? _fbb.CreateString(graphId) : 0;
  auto filePath__ = filePath ? _fbb.CreateString(filePath) : 0;
  auto visualization__ = visualization ? _fbb.CreateVector<uint8_t>(*visualization) : 0;
  return executionGraphGui::serialization::CreateSaveGraphRequest(
      _fbb,
      graphId__,
      filePath__,
      overwrite,
      visualization__);
}

}  // namespace serialization
}  // namespace executionGraphGui

#endif  // FLATBUFFERS_GENERATED_GRAPHMANAGEMENTMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_
