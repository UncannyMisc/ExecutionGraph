// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FILESYSTEMINFO_EXECUTIONGRAPHGUI_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_FILESYSTEMINFO_EXECUTIONGRAPHGUI_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace executionGraphGui {
namespace serialization {

struct PathInfo;

enum Permissions {
  Permissions_None = 0,
  Permissions_OwnerRead = 1,
  Permissions_OwnerWrite = 2,
  Permissions_OwnerReadWrite = 3,
  Permissions_MIN = Permissions_None,
  Permissions_MAX = Permissions_OwnerReadWrite
};

inline const Permissions (&EnumValuesPermissions())[4] {
  static const Permissions values[] = {
    Permissions_None,
    Permissions_OwnerRead,
    Permissions_OwnerWrite,
    Permissions_OwnerReadWrite
  };
  return values;
}

inline const char * const *EnumNamesPermissions() {
  static const char * const names[] = {
    "None",
    "OwnerRead",
    "OwnerWrite",
    "OwnerReadWrite",
    nullptr
  };
  return names;
}

inline const char *EnumNamePermissions(Permissions e) {
  if (e < Permissions_None || e > Permissions_OwnerReadWrite) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesPermissions()[index];
}

struct PathInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4,
    VT_PERMISSIONS = 6,
    VT_SIZE = 8,
    VT_MODIFIED = 10,
    VT_CONTAINEDFILES = 12,
    VT_CONTAINEDDIRECTORIES = 14
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  Permissions permissions() const {
    return static_cast<Permissions>(GetField<int8_t>(VT_PERMISSIONS, 0));
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  const flatbuffers::String *modified() const {
    return GetPointer<const flatbuffers::String *>(VT_MODIFIED);
  }
  const flatbuffers::Vector<flatbuffers::Offset<PathInfo>> *containedFiles() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PathInfo>> *>(VT_CONTAINEDFILES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<PathInfo>> *containedDirectories() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PathInfo>> *>(VT_CONTAINEDDIRECTORIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyField<int8_t>(verifier, VT_PERMISSIONS) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           VerifyOffsetRequired(verifier, VT_MODIFIED) &&
           verifier.VerifyString(modified()) &&
           VerifyOffset(verifier, VT_CONTAINEDFILES) &&
           verifier.VerifyVector(containedFiles()) &&
           verifier.VerifyVectorOfTables(containedFiles()) &&
           VerifyOffset(verifier, VT_CONTAINEDDIRECTORIES) &&
           verifier.VerifyVector(containedDirectories()) &&
           verifier.VerifyVectorOfTables(containedDirectories()) &&
           verifier.EndTable();
  }
};

struct PathInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(PathInfo::VT_PATH, path);
  }
  void add_permissions(Permissions permissions) {
    fbb_.AddElement<int8_t>(PathInfo::VT_PERMISSIONS, static_cast<int8_t>(permissions), 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(PathInfo::VT_SIZE, size, 0);
  }
  void add_modified(flatbuffers::Offset<flatbuffers::String> modified) {
    fbb_.AddOffset(PathInfo::VT_MODIFIED, modified);
  }
  void add_containedFiles(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PathInfo>>> containedFiles) {
    fbb_.AddOffset(PathInfo::VT_CONTAINEDFILES, containedFiles);
  }
  void add_containedDirectories(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PathInfo>>> containedDirectories) {
    fbb_.AddOffset(PathInfo::VT_CONTAINEDDIRECTORIES, containedDirectories);
  }
  explicit PathInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PathInfoBuilder &operator=(const PathInfoBuilder &);
  flatbuffers::Offset<PathInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PathInfo>(end);
    fbb_.Required(o, PathInfo::VT_PATH);
    fbb_.Required(o, PathInfo::VT_MODIFIED);
    return o;
  }
};

inline flatbuffers::Offset<PathInfo> CreatePathInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    Permissions permissions = Permissions_None,
    uint64_t size = 0,
    flatbuffers::Offset<flatbuffers::String> modified = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PathInfo>>> containedFiles = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PathInfo>>> containedDirectories = 0) {
  PathInfoBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_containedDirectories(containedDirectories);
  builder_.add_containedFiles(containedFiles);
  builder_.add_modified(modified);
  builder_.add_path(path);
  builder_.add_permissions(permissions);
  return builder_.Finish();
}

inline flatbuffers::Offset<PathInfo> CreatePathInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr,
    Permissions permissions = Permissions_None,
    uint64_t size = 0,
    const char *modified = nullptr,
    const std::vector<flatbuffers::Offset<PathInfo>> *containedFiles = nullptr,
    const std::vector<flatbuffers::Offset<PathInfo>> *containedDirectories = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  auto modified__ = modified ? _fbb.CreateString(modified) : 0;
  auto containedFiles__ = containedFiles ? _fbb.CreateVector<flatbuffers::Offset<PathInfo>>(*containedFiles) : 0;
  auto containedDirectories__ = containedDirectories ? _fbb.CreateVector<flatbuffers::Offset<PathInfo>>(*containedDirectories) : 0;
  return executionGraphGui::serialization::CreatePathInfo(
      _fbb,
      path__,
      permissions,
      size,
      modified__,
      containedFiles__,
      containedDirectories__);
}

}  // namespace serialization
}  // namespace executionGraphGui

#endif  // FLATBUFFERS_GENERATED_FILESYSTEMINFO_EXECUTIONGRAPHGUI_SERIALIZATION_H_
