// =========================================================================================
//  ExecutionGraph
//  Copyright (C) 2014 by Gabriel Nützi <gnuetzi (at) gmail (døt) com>
// 
//  @date Sat Jul 07 2018
//  @author Gabriel Nützi, gnuetzi (at) gmail (døt) com
// 
//  This Source Code Form is subject to the terms of the Mozilla Public
//  License, v. 2.0. If a copy of the MPL was not distributed with this
//  file, You can obtain one at http://mozilla.org/MPL/2.0/.
// =========================================================================================

include "executionGraphGui/messages/schemas/DataTypes.fbs";
include "executionGraph/serialization/schemas/LogicNode.fbs";

namespace executionGraphGui.serialization;

table NodeConstructionInfo {
    type:string (id: 0, required);              //!< The rtti of the node.
    name:string (id: 1, required);              //!< The name of the node.
    constructorArgs:[ConstructorKV] (id: 2);    //!< Key-value pairs for the cosntructor. (not yet used)
}

//! ======================================================================
//! Message "graph/addNode"
//! ======================================================================
//! Request data:
table AddNodeRequest {
    graphId:string (id:0, required);            //!< The graph guid.
    node:NodeConstructionInfo (id:1, required); //!< Node construction infos.
}
//! Response data:
//! Success: 
//    - status code: 200 (OK)
//! Valid Errors:
//!   - status code: 400 (Bad Request)
//!     - graph id is not found
//!     - type not valid
//!     - bad constructor arguments
table AddNodeResponse {
    node:executionGraph.serialization.LogicNode (id:0, required);
}
//! ======================================================================

//! ======================================================================
//! Message "graph/removeNode"
//! ======================================================================
//! Request data: 
table RemoveNodeRequest {
    graphId:string (id:0, required);  //!< The graph guid.
    nodeId:uint64 (id:1);             //!< The node id to remove from the graph.
}

//! Response data: none
//! Success: 
//    - status code: 200 (OK)
//! Valid Errors:
//!   - status code: 400 (Bad Request)
//!     - node id is not found
//!     - graph id is not found
//! ======================================================================


//! ======================================================================
//! Message "graph/addConnection"
//! ======================================================================
//! Request data:
table AddConnectionRequest {
    graphId:string (id:0, required); //!< The graph guid.
    socketLink: executionGraph.serialization.SocketLinkDescription (id:1, required); //!< The socket link description.

    checkForCycles: bool (id:2);     /*!< If a cycle-detection is started to directly 
                                        avoid cycles when construction the graph. */
}
//! Response data:
//! Success: 
//    - status code: 200 (OK)
//      if AddConnectionRequest::checkForCycles == true && cycles != nullptr 
//          -> adding connection failed!
//      else:
//          assert(cylces == nullptr);
//          -> adding connection succeeded!
//! Valid Errors:
//!   - status code: 400 (Bad Request)
//!     - graph id is not found
//!     - input/output node or their socket index don't exist
table AddConnectionResponse {
    /*! Cycle description if AddConnectionRequest::checkForCycles == true
        and cycles found. (at least one CycleDescription) */
    cycles: [CycleDescription] (id:0);
}
//! ======================================================================

//! ======================================================================
//! Message "graph/removeConnection"
//! ======================================================================
//! Request data: 
table RemoveConnectionRequest {
    graphId:string (id:0, required);  //!< The graph guid.
    socketLink: executionGraph.serialization.SocketLinkDescription (id:1, required); //!< The socket link description.
}

//! Response data: none
//! Success: 
//    - status code: 200 (OK)
//! Valid Errors:
//!   - status code: 400 (Bad Request)
//!     - input/output node or their socket index don't exist
//! ======================================================================