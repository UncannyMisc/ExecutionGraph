
@startuml core
set namespaceSeparator ::
skinparam shadowing false
skinparam defaultFontName "Fira Code"
skinparam nodesep 100

skinparam class{
    BorderColor<< Connections >> Blue
    BorderThickness<< Connections >> 3

    BorderColor<< Node >> Green
    BorderThickness<< Node >> 3
}

class DummyNode{
    --  In/Out Declerations --
    + inDecls
    + outDecls
    --
    + socket<decl>()
    + dataHandle<decl>()
    -- Sockets --
    - m_inSockets
    - m_outSockets
}

' namespace customSocketData{
'     class LogicSocketDataConnections<Traits, ParentSocket> << Connections >> {
'     }
'     class LogicSocketData<Data>{
'     }
' }

namespace executionGraph{

    class LogicNode <<Node>> {
        + id()
        --
        + virtual init() = 0
        + virtual reset() = 0
        + virtual compute() = 0
        --
        + registerInputs(...)
        + registerOutputs(...)
        --
        - m_inputs
        - m_outputs
    }

    namespace socket {

        class LogicSocketInput<Data> {
            + dataHandle() [const]
            --
            + connect<SocketData>(SocketData&)
            + disconnect() override
            + connections() [const]
            --
            - m_connections : Connections
        }

        class LogicSocketOutput<Data> {
            + dataHandle() [const]
            --
            + connect<SocketData>(SocketData&)
            + disconnect() override
            + connections() [const]
            --
            - m_connections : Connections
        }

        class LogicSocketBase<IsInput> {
            + type()
            + index()
            + parent()
            + castToType<T>()
            --
            + connect<Socket>(Socket&)
            + virtual disconnect() = 0
        }

        class LogicSocketConnections<Traits, ParentSocket> << Connections >> {
            Connection for input/output sockets
            --
            + connect(SocketData&)
            + disconnect(SocketData&)
            --
            + parent() [const] : ParentSocket&
            --
            - m_parent : Parent&
            - m_connections : SocketDataConnections*
            - m_dataAccess : ISocketDataAccess*
        }
    }

    class LogicSocketDataConnectionsBase<Traits>
    {
        - onConnect(outputSocket) = 0
        - onConnect(inputSocket)  = 0
        - onDisconnect(outputSocket)  = 0
        - onDisconnect(inputSocket)  = 0
        --
        + dataAccess() [const] : ISocketDataAccess&
        + parent() [const] : SocketDataBase&
        --
        - m_parent : SocketDataBase&
    }

    namespace socketData{
        class LogicSocketDataConnections<Traits, ParentSocket> << Connections >> {
            Connection for data sockets
            --
            + connect(InSocket&)
            + disconnect(InSocket&)
            + connect(OutSocket&)
            + disconnect(OutSocket&)
            --
            + parent() [const]
            --
            - m_parent : LogicSocketData&
            - m_inputs
            - m_outputs
        }

        class LogicSocketData<Data>{
            + virtual connect(InSocketBase&) override
            + virtual disconnect(InSocketBase&) override
            + virtual connect(OutSocketBase&) override
            + virtual disconnect(OutSocketBase&) override
            + connections() [const]
            --
            - m_data : Data
            - m_connections : Connections
        }


        ' class LogicSocketDataRef<Args...>{
            '     + setReference(socketData)
            '     --
            '     - LogicSocketData<Args>* m_socketData
            '
        ' }

    }

    class LogicDataHandle<Data>
    {
        value-semantic, type-erased,
        move-only RAII object
        --
        LogicDataHandle<Handle>(Handle&)
        --
        + operator bool()
        + operator==(nullptr)
        + operator!=(nullptr)
        --
        + operator*() : Data&
        + operator->() const : Data*
        + get() : Data&
        --
        - m_handle : std::unique_ptr<...>
        - m_data : Data*
    }

    interface ILogicSocketDataAccessBase
    interface ILogicSocketDataAccess<Data>
    {
        + dataHandleConst() const = 0
        + dataHandle() [const] = 0
    }

    class LogicSocketDataBase{
        + virtual connect(InSocketBase&) = 0
        + virtual disconnect(InSocketBase&) = 0
        + virtual connect(OutSocketBase&) = 0
        + virtual disconnect(OutSocketBase&) = 0
        --
        + dataAccess<T>() [const]
        --
        + type()
        + id()
    }
}

executionGraph::socket::LogicSocketInput -up-|> executionGraph::socket::LogicSocketBase
executionGraph::socket::LogicSocketOutput -up-|> executionGraph::socket::LogicSocketBase

executionGraph::LogicNode "*" o-up- executionGraph::socket::LogicSocketBase

DummyNode "*" *-up- executionGraph::socket::LogicSocketInput
DummyNode "*" *-up- executionGraph::socket::LogicSocketOutput

executionGraph::socket::LogicSocketInput "1" *-- executionGraph::socket::LogicSocketConnections
executionGraph::socket::LogicSocketOutput "1" *-- executionGraph::socket::LogicSocketConnections

executionGraph::socket::LogicSocketBase "1" o-down- executionGraph::LogicNode
executionGraph::socket::LogicSocketBase ...> executionGraph::socket::LogicSocketInput
executionGraph::socket::LogicSocketBase ...> executionGraph::socket::LogicSocketOutput

executionGraph::ILogicSocketDataAccess -up-|> executionGraph::ILogicSocketDataAccessBase
executionGraph::ILogicSocketDataAccess .right.> executionGraph::LogicDataHandle

executionGraph::socketData::LogicSocketData -up-|> executionGraph::LogicSocketDataBase
executionGraph::socketData::LogicSocketData -up-|> executionGraph::ILogicSocketDataAccess

' executionGraph::LogicSocketDataBase ...> executionGraph::ILogicSocketDataAccess
executionGraph::LogicSocketDataBase "1" o-down- executionGraph::ILogicSocketDataAccessBase

executionGraph::socketData::LogicSocketDataConnections "*" o-down- executionGraph::socket::LogicSocketBase
executionGraph::socketData::LogicSocketDataConnections -left-|> executionGraph::LogicSocketDataConnectionsBase
executionGraph::socketData::LogicSocketDataConnections "1" o-up- executionGraph::socketData::LogicSocketData

executionGraph::LogicSocketDataConnectionsBase o-up- executionGraph::LogicSocketDataBase

' executionGraph::socketData::LogicSocketData -right-o "1" executionGraph::socketData::LogicSocketDataRef
executionGraph::socketData::LogicSocketData "1" *-down- executionGraph::socketData::LogicSocketDataConnections

executionGraph::socket::LogicSocketConnections "1" o-up- executionGraph::LogicSocketDataConnectionsBase
executionGraph::socket::LogicSocketConnections "1" o-up- executionGraph::ILogicSocketDataAccess

' --
' customSocketData::LogicSocketDataConnections -right-|> executionGraph::LogicSocketDataConnectionsBase
' customSocketData::LogicSocketData -right-|> executionGraph::LogicSocketDataBase
' customSocketData::LogicSocketData -up-|> executionGraph::ILogicSocketDataAccess
' customSocketData::LogicSocketData "1" *-down- customSocketData::LogicSocketDataConnections
DummyNode -up-|> executionGraph::LogicNode

' customSocketData --> executionGraph

@enduml